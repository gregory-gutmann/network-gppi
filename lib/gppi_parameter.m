%% Get gPPI-Parameters% Gregory Gutman (14.11.22)%{Implementation based on PPPI.m script written by Donald G. McLarenand Aaron Schulz as well as spm_peb_ppi.m written by Darren Gitelman.Comment edited for clarity. Slight changes regarding use of micro and scan time. Also, I added an step of unwhitening the already whitened roi-variable and the deconvoluted neural signal, as whitenening is again reintroduced in the computation of beta values.    $Id: PPPI.m    Copyright (c) 2011, Donald G. McLaren and Aaron Schultz    Donald G. McLaren and Aaron Schultz    $Id: spm_peb_ppi.m     Copyright (C) 2002-2014 Wellcome Trust Centre for Neuroimaging    Darren Gitelman%} function gppi_parameter(fstFolder,ntwFolder,tasks)% Create result folderif ~exist([ntwFolder,'gppi',filesep,'parameters'])    mkdir([ntwFolder,'gppi',filesep,'parameters']);end% Set-upload([fstFolder, 'SPM.mat']);sessions        = numel(SPM.Sess);% Experiment-spefic parameter (scan timing)RT              = SPM.xY.RT;dt              = RT;        % Parameter for microtimingdtm             = SPM.xBF.dt;fMRI_T0m        = SPM.xBF.T0; for sess=1:sessions        % Session-specific parameter    Sess            = SPM.Sess(sess);    N               = length(Sess.row);                                   NTm             = round(RT/dtm);    km              = 1:NTm:N*NTm;             % Create HRF convulution matrix in scan and micro time    hrf             = spm_hrf(dt);    hrfm            = spm_hrf(dtm);    % Psychological variable (task regressor)     % Using mictroiming    PSYm            = psy_parameter(spm_get_ons(SPM,sess), tasks, N, NTm);    PSY             = PSYm((km-1) + fMRI_T0m,:);    % Create convolved explanatory {Hxb} variables in mirco time for greater    % overlap with the original PPPI packet(QQQ)    xb              = spm_dctmtx(N*NTm+128,N);    Hxb             = zeros(N,N);    for i = 1:N        Hx              = conv(xb(:,i),hrfm);        Hxb(:,i)        = Hx(km+128);    end    xb              = xb((129):end,:);    xb              = xb(fMRI_T0m:NTm:end,:);    % Eigenvalue-timeseries    evFolder        = [ntwFolder,'eigenvariates',filesep];    evList          = dir([evFolder,'*',num2str(sess),'.mat']);         evList          = {evList.name};        for ev=1:length(evList)                % Load in timeseries        evRoi           = evList{ev};        timeseries      = load([evFolder,evRoi], 'xY');        xY              = timeseries.xY;                % Confounds (in scan time): Whitened and filtered session cofound         % and temperoal filter cofounds        X0              = xY.X0;                 M               = size(X0,2);           % Number of cofounds                % Get eigenvariate timeseries and save in PPI structure (* see end)        Y               = xY.u;           PPI.Y           = Y;                % Specify covariance components; assume neuronal response is white        % (free of autocorrelation) treating confounds as fixed effects        Q               = speye(N,N)*N/trace(Hxb'*Hxb);        Q               = blkdiag(Q,speye(M,M)*1e6);                % Get whitening matrix (NB: confounds have already been whitened)        W               = SPM.xX.W(Sess.row,Sess.row);                % Create structure to deconvolute signal with Parametric Empirical         % Bayes(QQQ)        PEBP            = cell(2,1);        % Design matrix for lowest level (whitened convolution and temporal        % filtering) with i.i.d assumptions        PEBP{1}.X       = [W*Hxb X0];		        PEBP{1}.C       = speye(N,N)/4;		        % Design matrix for X0-parameters        PEBP{2}.X       = sparse(N + M,1);	        PEBP{2}.C       = Q;                % Deconvoluted neural signal        C               = spm_PEB(Y,PEBP);        xn              = xb*C{2}.E(1:N);        xn              = spm_detrend(xn);        % Unwhiten already whitened neural signal (**)        % This step was not in the original PPPI and introduced by me (G)        xnuw            = inv(W)*xn;        % Psychophysiological interactions        PSYxn           = zeros(size(PSY));        PSYHRF          = zeros(size(PSY));        for j=1:size(PSY,2)               % Multiply psychological variable by neural signal            PSYxn(:,j)      = PSY(:,j).*xnuw;                        % Convolve and resample at each scan for bold signal            ppit	        = conv(PSYxn(:,j),hrf);            ppit            = ppit(1:N);            ppi(:,j)        = spm_detrend(ppit);            % Convolve psychological variable            PSYHRFtmp       = conv(PSY(:,j),hrf);            PSYHRF(:,j)     = PSYHRFtmp(1:N);        end        % Save psychological and interaction variables        PPI.P           = PSYHRF(:,any(PSYHRF));        PPI.ppi         = ppi(:,any(ppi));                % Unwhiten already whitened ROI-variable (**)        % This step was not in the original PPPI and introduced by me (G)        PPI.Y           = inv(W)*PPI.Y;        % Define output         % Seed timeseries        OUT.Y.C         = PPI.Y;        OUT.Y.name      = {[evRoi '_seedtc']};        % Psychological design        OUT.P.C         = PPI.P;        % Psychophysiological interaction        OUT.PPI.C       = PPI.ppi;                     % Name for design and ppi        OUT.P.name={};        OUT.PPI.name={};        for i=1:(length(tasks))            OUT.P.name{i}=Sess.U(i).name;            OUT.PPI.name{i}=['PPI_' cell2mat(Sess.U(i).name)];        end        % Cofounds        OUT.C.C         = SPM.Sess(sess).C.C;        OUT.C.name      = SPM.Sess(sess).C.name;        % Save Output        save([ntwFolder,'gppi',filesep,'parameters',filesep,'PPI_',evRoi],'OUT','-v7.3');                clear PPI ppi OUT    end    clear PSYend